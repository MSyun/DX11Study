// 計算用関数群
// 2016. 4.16	:	プログラム作成
// author		:	SyunMizuno


#pragma once


#include	"../Matrix/Matrix4x4/Matrix4x4.h"
#include	"../Vector/Vector2/Vector2.h"
#include	"../Vector/Vector3/Vector3.h"
#include	"../Vector/Vector4/Vector4.h"



/* 内積
// pL	: 左辺値
// pR	: 右辺値
*/
float Vec3Dot(const Vector3* pL, const Vector3* pR);

/* 外積
// pOut	: 格納されるベクトル
// pL	: 左辺値
// pR	: 右辺値
*/
void Vec3Cross(Vector3* pOut, const Vector3* pL, const Vector3* pR);


/* 単位行列の生成
// pMat	: 生成する元の行列
*/
void MatrixIdentity(Matrix4x4* pMat);

/* 行列の乗算
// pMat	: 格納したい行列
// pL	: 左辺値
// pR	: 右辺値
*/
void MatrixMultiply(
	Matrix4x4* pMat,
	const Matrix4x4* pL,
	const Matrix4x4* pR);

/* ワールドX軸回転行列生成
// pMat		: 格納したい行列
// Angle	: 回転角度
*/
void MatrixRotationX(Matrix4x4* pMat, float Angle);

/* ワールドY軸回転行列生成
// pMat		: 格納したい行列
// Angle	: 回転角度
*/
void MatrixRotationY(Matrix4x4* pMat, float Angle);

/* ワールドZ軸回転行列生成
// pMat		: 格納したい行列
// Angle	: 回転角度
*/
void MatrixRotationZ(Matrix4x4* pMat, float Angle);

/* ワールド3軸回転行列生成
// pMat		: 格納したい行列
// Yaw		: Y軸回転角度
// Pitch	: X軸回転角度
// Roll		: Z軸回転角度
*/
void MatrixRotationYawPitchRoll(
	Matrix4x4* pMat,
	float Yaw,
	float Pitch,
	float Roll);

/* ワールド軸平行移動行列生成
// pMat	: 格納したい行列
// X	: X軸移動量
// Y	: Y軸移動量
// Z	: Z軸移動量
*/
void MatrixTranslation(Matrix4x4* pMat, float X, float Y, float Z);

/* 拡大・縮小行列生成
// pMat	: 格納したい行列
// X	: X軸拡大率
// Y	: Y軸拡大率
// Z	: Z軸拡大率
*/
void MatrixScaling(Matrix4x4* pMat, float X, float Y, float Z);

/* 転置行列の生成
// pOut	: 格納したい行列
// pM	: 転置したい行列
*/
void MatrixTranspose(Matrix4x4* pOut, const Matrix4x4* pM);

/* 左手座標系ビュー行列作成
// pOut	: 格納したい行列
// pEye	: 視点
// pAt	: カメラの注視点
// pUp	: 上方向
*/
void MatrixLookAtLH(
	Matrix4x4* pOut,
	const Vector3* pEye,
	const Vector3* pAt,
	const Vector3* pUp);

/* 右手座標系ビュー行列作成
// pOut	: 格納したい行列
// pEye	: 視点
// pAt	: カメラの注視点
// pUp	: 上方向
*/
void MatrixLookAtRH(
	Matrix4x4* pOut,
	const Vector3* pEye,
	const Vector3* pAt,
	const Vector3* pUp);

/* 左手座標系パースペクティブ行列作成
// pOut		: 演算結果の行列
// fovY		: y方向への視野（ラジアン単位）
// Aspect	: アスペクト比
// zn		: ニアクリップ
// zf		: ファークリップ
*/
void MatrixPerspectiveFovLH(
	Matrix4x4* pOut,
	float fovY,
	float Aspect,
	float zn,
	float zf);

/* 任意軸回転行列生成
// pMat		: 格納したい行列
// pV		: 任意の軸
// Angle	: 回転角度
*/
void MatrixRotationAxis(
	Matrix4x4* pMat,
	Vector3* pV,
	float Angle);
